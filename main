#include <iostream>
using namespace std;

class tree_t
{
	struct node_t {
		node_t * left;
		node_t * right;
		int value;
  };
	node_t * root = NULL;
	//root = NULL;
public:

	void insert(int value) {
		node_t * a = new node_t;
		a->value = value;
		a->left = NULL;
		a->right = NULL;
		node_t * head = root;
		if (head == NULL) {
			root = a;
		}
		else {
			while (head != NULL) {
				if (value < root->value) { head = head->left; }
				else { head = head->right; }
				if (head == NULL) {
					head = a; //break;
				}
			}
			delete a;
		}
	}

	bool find(int value) const
	{
		bool a = false;
		if (root == NULL) cout << "Tree is empty" << endl;
		else {
			node_t *search = root;
			while (search->value != value) {
				if (value < search->value && search->left != NULL) search = search->left;
				else if (search->right != NULL) search = search->right;
				if (search->value == value) a = true;
			}
		}
		return a;
	}

	void print(ostream & stream, node_t *f, int u) const
	{
		for (int i = 0; i < u; i++) stream << "--";
		stream << f->value << endl;
		}

	void help_print(ostream & stream, node_t * s, int u) {
		if (s == NULL) return;
		else
			{
				help_print(stream, s->right, ++u);
				print(cout, s, u);
			//	u--;
				help_print(stream, s->left, ++u);
            }
		}

	void help_print(ostream & stream) {
		help_print(stream,root, 0);
	}
	};


int main()
{
	char op; int a;
	tree_t tree;
	cin >> op;
	while (op != 'q') {
		switch (op) {
		case '+':
			cin >> a;
			tree.insert(a);
			tree.help_print(cout);
			break;
		case '?':
			cin >> a;
			cout << tree.find(a) << endl;
			//tree.help_print(cout);
			break;
		case '=':
			tree.help_print(cout);
		}
		cin >> op;
	}
	return 0;
}
